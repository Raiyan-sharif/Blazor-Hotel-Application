@using System.Threading

@page "/lifecycle"

<h3>Lifecycle</h3>
<div class="border">
    <LifecycleComponent CountValue="@currentCount"></LifecycleComponent>
</div>

<h1>Counter</h1>

<p>Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button><br />
@Count <button class="btn btn-primary" @onclick="StartCountdown">Start Countdown</button><br />

@foreach(var item in EventType)
{
    @item
    <hr />
}

@code {
    private int currentCount = 0;
    private int Count { get; set; } = 5;
    List<string> EventType = new List<string>();

    private void IncrementCount()
    {
        currentCount++;
    }
    protected override void OnInitialized()
    {
        //base.OnInitialized();
        EventType.Add("OnInitialized Called");
    }
    protected override async Task OnInitializedAsync()
    {
        EventType.Add("OnInitializedAsync Called");
        await Task.Delay(1000);
    }

    protected override void OnParametersSet()
    {
        EventType.Add("OnParameterSet is Called");
    }
    protected override async Task OnParametersSetAsync()
    {
        EventType.Add("OnParameterSetAsync is Called");
        await Task.Delay(1000);

    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            currentCount = 101;
        }
        else
        {
            currentCount = 999;
        }
        EventType.Add("OnAfterRender is Called");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add("OnAfterRenderAsync is Called");
        await Task.Delay(1000);
    }

    protected override bool ShouldRender()
    {
        EventType.Add("ShouldRender is Called");
        return true;
    }
    void StartCountdown()
    {
        var timer = new Timer(TimerCallback, null, 1000, 1000);
    }
    void TimerCallback(object state)
    {
        if(Count > 0)
        {
            Count--;
            InvokeAsync(StateHasChanged);
        }
    }
} 
